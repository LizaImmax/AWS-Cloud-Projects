Step 6: Defining an EC2 instance resource and creating the application stack
I am defining an EC2 instance resource in an AWS CloudFormation template to deploy a dynamic café website. I start by duplicating an existing template and modifying it to include parameters for selecting an instance type, referencing the latest Amazon Linux 2 AMI, and integrating with the update-cafe-network stack. I configure an EC2 instance with security groups, key pairs, and IAM roles to ensure it deploys in the correct network environment. Additionally, I add UserData to install necessary software, start services, and download a script that configures the café website. Once the template is validated, I push it to AWS CodeCommit, which triggers a deployment pipeline via AWS CodePipeline, automatically provisioning the necessary resources.

The purpose of this task is to automate infrastructure deployment using Infrastructure as Code (IaC), ensuring consistency, scalability, and repeatability. By integrating with AWS CodePipeline, I enable Continuous Integration and Continuous Deployment (CI/CD), making updates easy to manage and apply whenever the CloudFormation template is modified. This approach eliminates manual configuration, reduces human error, and speeds up the deployment process. Ultimately, I am using automation to efficiently provision and manage cloud infrastructure for web applications in a structured and scalable way.

